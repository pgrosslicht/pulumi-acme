// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class AcmeCertificate extends pulumi.CustomResource {
    /**
     * Get an existing AcmeCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AcmeCertificateState, opts?: pulumi.CustomResourceOptions): AcmeCertificate {
        return new AcmeCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'acme:index/acmeCertificate:AcmeCertificate';

    /**
     * Returns true if the given object is an instance of AcmeCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AcmeCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AcmeCertificate.__pulumiType;
    }

    public readonly accountKeyPem!: pulumi.Output<string>;
    public /*out*/ readonly certificateDomain!: pulumi.Output<string>;
    public /*out*/ readonly certificateP12!: pulumi.Output<string>;
    public readonly certificateP12Password!: pulumi.Output<string | undefined>;
    public /*out*/ readonly certificatePem!: pulumi.Output<string>;
    public readonly certificateRequestPem!: pulumi.Output<string | undefined>;
    public /*out*/ readonly certificateUrl!: pulumi.Output<string>;
    public readonly commonName!: pulumi.Output<string | undefined>;
    public readonly disableCompletePropagation!: pulumi.Output<boolean | undefined>;
    public readonly dnsChallenges!: pulumi.Output<outputs.AcmeCertificateDnsChallenge[] | undefined>;
    public readonly httpChallenge!: pulumi.Output<outputs.AcmeCertificateHttpChallenge | undefined>;
    public readonly httpMemcachedChallenge!: pulumi.Output<outputs.AcmeCertificateHttpMemcachedChallenge | undefined>;
    public readonly httpWebrootChallenge!: pulumi.Output<outputs.AcmeCertificateHttpWebrootChallenge | undefined>;
    public /*out*/ readonly issuerPem!: pulumi.Output<string>;
    public readonly keyType!: pulumi.Output<string | undefined>;
    public readonly minDaysRemaining!: pulumi.Output<number | undefined>;
    public readonly mustStaple!: pulumi.Output<boolean | undefined>;
    public readonly preCheckDelay!: pulumi.Output<number | undefined>;
    public readonly preferredChain!: pulumi.Output<string | undefined>;
    public /*out*/ readonly privateKeyPem!: pulumi.Output<string>;
    public readonly recursiveNameservers!: pulumi.Output<string[] | undefined>;
    public readonly revokeCertificateOnDestroy!: pulumi.Output<boolean | undefined>;
    public readonly subjectAlternativeNames!: pulumi.Output<string[] | undefined>;
    public readonly tlsChallenge!: pulumi.Output<outputs.AcmeCertificateTlsChallenge | undefined>;

    /**
     * Create a AcmeCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AcmeCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AcmeCertificateArgs | AcmeCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AcmeCertificateState | undefined;
            resourceInputs["accountKeyPem"] = state ? state.accountKeyPem : undefined;
            resourceInputs["certificateDomain"] = state ? state.certificateDomain : undefined;
            resourceInputs["certificateP12"] = state ? state.certificateP12 : undefined;
            resourceInputs["certificateP12Password"] = state ? state.certificateP12Password : undefined;
            resourceInputs["certificatePem"] = state ? state.certificatePem : undefined;
            resourceInputs["certificateRequestPem"] = state ? state.certificateRequestPem : undefined;
            resourceInputs["certificateUrl"] = state ? state.certificateUrl : undefined;
            resourceInputs["commonName"] = state ? state.commonName : undefined;
            resourceInputs["disableCompletePropagation"] = state ? state.disableCompletePropagation : undefined;
            resourceInputs["dnsChallenges"] = state ? state.dnsChallenges : undefined;
            resourceInputs["httpChallenge"] = state ? state.httpChallenge : undefined;
            resourceInputs["httpMemcachedChallenge"] = state ? state.httpMemcachedChallenge : undefined;
            resourceInputs["httpWebrootChallenge"] = state ? state.httpWebrootChallenge : undefined;
            resourceInputs["issuerPem"] = state ? state.issuerPem : undefined;
            resourceInputs["keyType"] = state ? state.keyType : undefined;
            resourceInputs["minDaysRemaining"] = state ? state.minDaysRemaining : undefined;
            resourceInputs["mustStaple"] = state ? state.mustStaple : undefined;
            resourceInputs["preCheckDelay"] = state ? state.preCheckDelay : undefined;
            resourceInputs["preferredChain"] = state ? state.preferredChain : undefined;
            resourceInputs["privateKeyPem"] = state ? state.privateKeyPem : undefined;
            resourceInputs["recursiveNameservers"] = state ? state.recursiveNameservers : undefined;
            resourceInputs["revokeCertificateOnDestroy"] = state ? state.revokeCertificateOnDestroy : undefined;
            resourceInputs["subjectAlternativeNames"] = state ? state.subjectAlternativeNames : undefined;
            resourceInputs["tlsChallenge"] = state ? state.tlsChallenge : undefined;
        } else {
            const args = argsOrState as AcmeCertificateArgs | undefined;
            if ((!args || args.accountKeyPem === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accountKeyPem'");
            }
            resourceInputs["accountKeyPem"] = args ? args.accountKeyPem : undefined;
            resourceInputs["certificateP12Password"] = args ? args.certificateP12Password : undefined;
            resourceInputs["certificateRequestPem"] = args ? args.certificateRequestPem : undefined;
            resourceInputs["commonName"] = args ? args.commonName : undefined;
            resourceInputs["disableCompletePropagation"] = args ? args.disableCompletePropagation : undefined;
            resourceInputs["dnsChallenges"] = args ? args.dnsChallenges : undefined;
            resourceInputs["httpChallenge"] = args ? args.httpChallenge : undefined;
            resourceInputs["httpMemcachedChallenge"] = args ? args.httpMemcachedChallenge : undefined;
            resourceInputs["httpWebrootChallenge"] = args ? args.httpWebrootChallenge : undefined;
            resourceInputs["keyType"] = args ? args.keyType : undefined;
            resourceInputs["minDaysRemaining"] = args ? args.minDaysRemaining : undefined;
            resourceInputs["mustStaple"] = args ? args.mustStaple : undefined;
            resourceInputs["preCheckDelay"] = args ? args.preCheckDelay : undefined;
            resourceInputs["preferredChain"] = args ? args.preferredChain : undefined;
            resourceInputs["recursiveNameservers"] = args ? args.recursiveNameservers : undefined;
            resourceInputs["revokeCertificateOnDestroy"] = args ? args.revokeCertificateOnDestroy : undefined;
            resourceInputs["subjectAlternativeNames"] = args ? args.subjectAlternativeNames : undefined;
            resourceInputs["tlsChallenge"] = args ? args.tlsChallenge : undefined;
            resourceInputs["certificateDomain"] = undefined /*out*/;
            resourceInputs["certificateP12"] = undefined /*out*/;
            resourceInputs["certificatePem"] = undefined /*out*/;
            resourceInputs["certificateUrl"] = undefined /*out*/;
            resourceInputs["issuerPem"] = undefined /*out*/;
            resourceInputs["privateKeyPem"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AcmeCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AcmeCertificate resources.
 */
export interface AcmeCertificateState {
    accountKeyPem?: pulumi.Input<string>;
    certificateDomain?: pulumi.Input<string>;
    certificateP12?: pulumi.Input<string>;
    certificateP12Password?: pulumi.Input<string>;
    certificatePem?: pulumi.Input<string>;
    certificateRequestPem?: pulumi.Input<string>;
    certificateUrl?: pulumi.Input<string>;
    commonName?: pulumi.Input<string>;
    disableCompletePropagation?: pulumi.Input<boolean>;
    dnsChallenges?: pulumi.Input<pulumi.Input<inputs.AcmeCertificateDnsChallenge>[]>;
    httpChallenge?: pulumi.Input<inputs.AcmeCertificateHttpChallenge>;
    httpMemcachedChallenge?: pulumi.Input<inputs.AcmeCertificateHttpMemcachedChallenge>;
    httpWebrootChallenge?: pulumi.Input<inputs.AcmeCertificateHttpWebrootChallenge>;
    issuerPem?: pulumi.Input<string>;
    keyType?: pulumi.Input<string>;
    minDaysRemaining?: pulumi.Input<number>;
    mustStaple?: pulumi.Input<boolean>;
    preCheckDelay?: pulumi.Input<number>;
    preferredChain?: pulumi.Input<string>;
    privateKeyPem?: pulumi.Input<string>;
    recursiveNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    revokeCertificateOnDestroy?: pulumi.Input<boolean>;
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    tlsChallenge?: pulumi.Input<inputs.AcmeCertificateTlsChallenge>;
}

/**
 * The set of arguments for constructing a AcmeCertificate resource.
 */
export interface AcmeCertificateArgs {
    accountKeyPem: pulumi.Input<string>;
    certificateP12Password?: pulumi.Input<string>;
    certificateRequestPem?: pulumi.Input<string>;
    commonName?: pulumi.Input<string>;
    disableCompletePropagation?: pulumi.Input<boolean>;
    dnsChallenges?: pulumi.Input<pulumi.Input<inputs.AcmeCertificateDnsChallenge>[]>;
    httpChallenge?: pulumi.Input<inputs.AcmeCertificateHttpChallenge>;
    httpMemcachedChallenge?: pulumi.Input<inputs.AcmeCertificateHttpMemcachedChallenge>;
    httpWebrootChallenge?: pulumi.Input<inputs.AcmeCertificateHttpWebrootChallenge>;
    keyType?: pulumi.Input<string>;
    minDaysRemaining?: pulumi.Input<number>;
    mustStaple?: pulumi.Input<boolean>;
    preCheckDelay?: pulumi.Input<number>;
    preferredChain?: pulumi.Input<string>;
    recursiveNameservers?: pulumi.Input<pulumi.Input<string>[]>;
    revokeCertificateOnDestroy?: pulumi.Input<boolean>;
    subjectAlternativeNames?: pulumi.Input<pulumi.Input<string>[]>;
    tlsChallenge?: pulumi.Input<inputs.AcmeCertificateTlsChallenge>;
}
