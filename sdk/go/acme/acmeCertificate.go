// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acme

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AcmeCertificate struct {
	pulumi.CustomResourceState

	AccountKeyPem              pulumi.StringOutput                            `pulumi:"accountKeyPem"`
	CertificateDomain          pulumi.StringOutput                            `pulumi:"certificateDomain"`
	CertificateP12             pulumi.StringOutput                            `pulumi:"certificateP12"`
	CertificateP12Password     pulumi.StringPtrOutput                         `pulumi:"certificateP12Password"`
	CertificatePem             pulumi.StringOutput                            `pulumi:"certificatePem"`
	CertificateRequestPem      pulumi.StringPtrOutput                         `pulumi:"certificateRequestPem"`
	CertificateUrl             pulumi.StringOutput                            `pulumi:"certificateUrl"`
	CommonName                 pulumi.StringPtrOutput                         `pulumi:"commonName"`
	DisableCompletePropagation pulumi.BoolPtrOutput                           `pulumi:"disableCompletePropagation"`
	DnsChallenges              AcmeCertificateDnsChallengeArrayOutput         `pulumi:"dnsChallenges"`
	HttpChallenge              AcmeCertificateHttpChallengePtrOutput          `pulumi:"httpChallenge"`
	HttpMemcachedChallenge     AcmeCertificateHttpMemcachedChallengePtrOutput `pulumi:"httpMemcachedChallenge"`
	HttpWebrootChallenge       AcmeCertificateHttpWebrootChallengePtrOutput   `pulumi:"httpWebrootChallenge"`
	IssuerPem                  pulumi.StringOutput                            `pulumi:"issuerPem"`
	KeyType                    pulumi.StringPtrOutput                         `pulumi:"keyType"`
	MinDaysRemaining           pulumi.IntPtrOutput                            `pulumi:"minDaysRemaining"`
	MustStaple                 pulumi.BoolPtrOutput                           `pulumi:"mustStaple"`
	PreCheckDelay              pulumi.IntPtrOutput                            `pulumi:"preCheckDelay"`
	PreferredChain             pulumi.StringPtrOutput                         `pulumi:"preferredChain"`
	PrivateKeyPem              pulumi.StringOutput                            `pulumi:"privateKeyPem"`
	RecursiveNameservers       pulumi.StringArrayOutput                       `pulumi:"recursiveNameservers"`
	RevokeCertificateOnDestroy pulumi.BoolPtrOutput                           `pulumi:"revokeCertificateOnDestroy"`
	SubjectAlternativeNames    pulumi.StringArrayOutput                       `pulumi:"subjectAlternativeNames"`
	TlsChallenge               AcmeCertificateTlsChallengePtrOutput           `pulumi:"tlsChallenge"`
}

// NewAcmeCertificate registers a new resource with the given unique name, arguments, and options.
func NewAcmeCertificate(ctx *pulumi.Context,
	name string, args *AcmeCertificateArgs, opts ...pulumi.ResourceOption) (*AcmeCertificate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountKeyPem == nil {
		return nil, errors.New("invalid value for required argument 'AccountKeyPem'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AcmeCertificate
	err := ctx.RegisterResource("acme:index/acmeCertificate:AcmeCertificate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcmeCertificate gets an existing AcmeCertificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcmeCertificate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AcmeCertificateState, opts ...pulumi.ResourceOption) (*AcmeCertificate, error) {
	var resource AcmeCertificate
	err := ctx.ReadResource("acme:index/acmeCertificate:AcmeCertificate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AcmeCertificate resources.
type acmeCertificateState struct {
	AccountKeyPem              *string                                `pulumi:"accountKeyPem"`
	CertificateDomain          *string                                `pulumi:"certificateDomain"`
	CertificateP12             *string                                `pulumi:"certificateP12"`
	CertificateP12Password     *string                                `pulumi:"certificateP12Password"`
	CertificatePem             *string                                `pulumi:"certificatePem"`
	CertificateRequestPem      *string                                `pulumi:"certificateRequestPem"`
	CertificateUrl             *string                                `pulumi:"certificateUrl"`
	CommonName                 *string                                `pulumi:"commonName"`
	DisableCompletePropagation *bool                                  `pulumi:"disableCompletePropagation"`
	DnsChallenges              []AcmeCertificateDnsChallenge          `pulumi:"dnsChallenges"`
	HttpChallenge              *AcmeCertificateHttpChallenge          `pulumi:"httpChallenge"`
	HttpMemcachedChallenge     *AcmeCertificateHttpMemcachedChallenge `pulumi:"httpMemcachedChallenge"`
	HttpWebrootChallenge       *AcmeCertificateHttpWebrootChallenge   `pulumi:"httpWebrootChallenge"`
	IssuerPem                  *string                                `pulumi:"issuerPem"`
	KeyType                    *string                                `pulumi:"keyType"`
	MinDaysRemaining           *int                                   `pulumi:"minDaysRemaining"`
	MustStaple                 *bool                                  `pulumi:"mustStaple"`
	PreCheckDelay              *int                                   `pulumi:"preCheckDelay"`
	PreferredChain             *string                                `pulumi:"preferredChain"`
	PrivateKeyPem              *string                                `pulumi:"privateKeyPem"`
	RecursiveNameservers       []string                               `pulumi:"recursiveNameservers"`
	RevokeCertificateOnDestroy *bool                                  `pulumi:"revokeCertificateOnDestroy"`
	SubjectAlternativeNames    []string                               `pulumi:"subjectAlternativeNames"`
	TlsChallenge               *AcmeCertificateTlsChallenge           `pulumi:"tlsChallenge"`
}

type AcmeCertificateState struct {
	AccountKeyPem              pulumi.StringPtrInput
	CertificateDomain          pulumi.StringPtrInput
	CertificateP12             pulumi.StringPtrInput
	CertificateP12Password     pulumi.StringPtrInput
	CertificatePem             pulumi.StringPtrInput
	CertificateRequestPem      pulumi.StringPtrInput
	CertificateUrl             pulumi.StringPtrInput
	CommonName                 pulumi.StringPtrInput
	DisableCompletePropagation pulumi.BoolPtrInput
	DnsChallenges              AcmeCertificateDnsChallengeArrayInput
	HttpChallenge              AcmeCertificateHttpChallengePtrInput
	HttpMemcachedChallenge     AcmeCertificateHttpMemcachedChallengePtrInput
	HttpWebrootChallenge       AcmeCertificateHttpWebrootChallengePtrInput
	IssuerPem                  pulumi.StringPtrInput
	KeyType                    pulumi.StringPtrInput
	MinDaysRemaining           pulumi.IntPtrInput
	MustStaple                 pulumi.BoolPtrInput
	PreCheckDelay              pulumi.IntPtrInput
	PreferredChain             pulumi.StringPtrInput
	PrivateKeyPem              pulumi.StringPtrInput
	RecursiveNameservers       pulumi.StringArrayInput
	RevokeCertificateOnDestroy pulumi.BoolPtrInput
	SubjectAlternativeNames    pulumi.StringArrayInput
	TlsChallenge               AcmeCertificateTlsChallengePtrInput
}

func (AcmeCertificateState) ElementType() reflect.Type {
	return reflect.TypeOf((*acmeCertificateState)(nil)).Elem()
}

type acmeCertificateArgs struct {
	AccountKeyPem              string                                 `pulumi:"accountKeyPem"`
	CertificateP12Password     *string                                `pulumi:"certificateP12Password"`
	CertificateRequestPem      *string                                `pulumi:"certificateRequestPem"`
	CommonName                 *string                                `pulumi:"commonName"`
	DisableCompletePropagation *bool                                  `pulumi:"disableCompletePropagation"`
	DnsChallenges              []AcmeCertificateDnsChallenge          `pulumi:"dnsChallenges"`
	HttpChallenge              *AcmeCertificateHttpChallenge          `pulumi:"httpChallenge"`
	HttpMemcachedChallenge     *AcmeCertificateHttpMemcachedChallenge `pulumi:"httpMemcachedChallenge"`
	HttpWebrootChallenge       *AcmeCertificateHttpWebrootChallenge   `pulumi:"httpWebrootChallenge"`
	KeyType                    *string                                `pulumi:"keyType"`
	MinDaysRemaining           *int                                   `pulumi:"minDaysRemaining"`
	MustStaple                 *bool                                  `pulumi:"mustStaple"`
	PreCheckDelay              *int                                   `pulumi:"preCheckDelay"`
	PreferredChain             *string                                `pulumi:"preferredChain"`
	RecursiveNameservers       []string                               `pulumi:"recursiveNameservers"`
	RevokeCertificateOnDestroy *bool                                  `pulumi:"revokeCertificateOnDestroy"`
	SubjectAlternativeNames    []string                               `pulumi:"subjectAlternativeNames"`
	TlsChallenge               *AcmeCertificateTlsChallenge           `pulumi:"tlsChallenge"`
}

// The set of arguments for constructing a AcmeCertificate resource.
type AcmeCertificateArgs struct {
	AccountKeyPem              pulumi.StringInput
	CertificateP12Password     pulumi.StringPtrInput
	CertificateRequestPem      pulumi.StringPtrInput
	CommonName                 pulumi.StringPtrInput
	DisableCompletePropagation pulumi.BoolPtrInput
	DnsChallenges              AcmeCertificateDnsChallengeArrayInput
	HttpChallenge              AcmeCertificateHttpChallengePtrInput
	HttpMemcachedChallenge     AcmeCertificateHttpMemcachedChallengePtrInput
	HttpWebrootChallenge       AcmeCertificateHttpWebrootChallengePtrInput
	KeyType                    pulumi.StringPtrInput
	MinDaysRemaining           pulumi.IntPtrInput
	MustStaple                 pulumi.BoolPtrInput
	PreCheckDelay              pulumi.IntPtrInput
	PreferredChain             pulumi.StringPtrInput
	RecursiveNameservers       pulumi.StringArrayInput
	RevokeCertificateOnDestroy pulumi.BoolPtrInput
	SubjectAlternativeNames    pulumi.StringArrayInput
	TlsChallenge               AcmeCertificateTlsChallengePtrInput
}

func (AcmeCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*acmeCertificateArgs)(nil)).Elem()
}

type AcmeCertificateInput interface {
	pulumi.Input

	ToAcmeCertificateOutput() AcmeCertificateOutput
	ToAcmeCertificateOutputWithContext(ctx context.Context) AcmeCertificateOutput
}

func (*AcmeCertificate) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeCertificate)(nil)).Elem()
}

func (i *AcmeCertificate) ToAcmeCertificateOutput() AcmeCertificateOutput {
	return i.ToAcmeCertificateOutputWithContext(context.Background())
}

func (i *AcmeCertificate) ToAcmeCertificateOutputWithContext(ctx context.Context) AcmeCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateOutput)
}

// AcmeCertificateArrayInput is an input type that accepts AcmeCertificateArray and AcmeCertificateArrayOutput values.
// You can construct a concrete instance of `AcmeCertificateArrayInput` via:
//
//	AcmeCertificateArray{ AcmeCertificateArgs{...} }
type AcmeCertificateArrayInput interface {
	pulumi.Input

	ToAcmeCertificateArrayOutput() AcmeCertificateArrayOutput
	ToAcmeCertificateArrayOutputWithContext(context.Context) AcmeCertificateArrayOutput
}

type AcmeCertificateArray []AcmeCertificateInput

func (AcmeCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AcmeCertificate)(nil)).Elem()
}

func (i AcmeCertificateArray) ToAcmeCertificateArrayOutput() AcmeCertificateArrayOutput {
	return i.ToAcmeCertificateArrayOutputWithContext(context.Background())
}

func (i AcmeCertificateArray) ToAcmeCertificateArrayOutputWithContext(ctx context.Context) AcmeCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateArrayOutput)
}

// AcmeCertificateMapInput is an input type that accepts AcmeCertificateMap and AcmeCertificateMapOutput values.
// You can construct a concrete instance of `AcmeCertificateMapInput` via:
//
//	AcmeCertificateMap{ "key": AcmeCertificateArgs{...} }
type AcmeCertificateMapInput interface {
	pulumi.Input

	ToAcmeCertificateMapOutput() AcmeCertificateMapOutput
	ToAcmeCertificateMapOutputWithContext(context.Context) AcmeCertificateMapOutput
}

type AcmeCertificateMap map[string]AcmeCertificateInput

func (AcmeCertificateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AcmeCertificate)(nil)).Elem()
}

func (i AcmeCertificateMap) ToAcmeCertificateMapOutput() AcmeCertificateMapOutput {
	return i.ToAcmeCertificateMapOutputWithContext(context.Background())
}

func (i AcmeCertificateMap) ToAcmeCertificateMapOutputWithContext(ctx context.Context) AcmeCertificateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateMapOutput)
}

type AcmeCertificateOutput struct{ *pulumi.OutputState }

func (AcmeCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeCertificate)(nil)).Elem()
}

func (o AcmeCertificateOutput) ToAcmeCertificateOutput() AcmeCertificateOutput {
	return o
}

func (o AcmeCertificateOutput) ToAcmeCertificateOutputWithContext(ctx context.Context) AcmeCertificateOutput {
	return o
}

func (o AcmeCertificateOutput) AccountKeyPem() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringOutput { return v.AccountKeyPem }).(pulumi.StringOutput)
}

func (o AcmeCertificateOutput) CertificateDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringOutput { return v.CertificateDomain }).(pulumi.StringOutput)
}

func (o AcmeCertificateOutput) CertificateP12() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringOutput { return v.CertificateP12 }).(pulumi.StringOutput)
}

func (o AcmeCertificateOutput) CertificateP12Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringPtrOutput { return v.CertificateP12Password }).(pulumi.StringPtrOutput)
}

func (o AcmeCertificateOutput) CertificatePem() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringOutput { return v.CertificatePem }).(pulumi.StringOutput)
}

func (o AcmeCertificateOutput) CertificateRequestPem() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringPtrOutput { return v.CertificateRequestPem }).(pulumi.StringPtrOutput)
}

func (o AcmeCertificateOutput) CertificateUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringOutput { return v.CertificateUrl }).(pulumi.StringOutput)
}

func (o AcmeCertificateOutput) CommonName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringPtrOutput { return v.CommonName }).(pulumi.StringPtrOutput)
}

func (o AcmeCertificateOutput) DisableCompletePropagation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.BoolPtrOutput { return v.DisableCompletePropagation }).(pulumi.BoolPtrOutput)
}

func (o AcmeCertificateOutput) DnsChallenges() AcmeCertificateDnsChallengeArrayOutput {
	return o.ApplyT(func(v *AcmeCertificate) AcmeCertificateDnsChallengeArrayOutput { return v.DnsChallenges }).(AcmeCertificateDnsChallengeArrayOutput)
}

func (o AcmeCertificateOutput) HttpChallenge() AcmeCertificateHttpChallengePtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) AcmeCertificateHttpChallengePtrOutput { return v.HttpChallenge }).(AcmeCertificateHttpChallengePtrOutput)
}

func (o AcmeCertificateOutput) HttpMemcachedChallenge() AcmeCertificateHttpMemcachedChallengePtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) AcmeCertificateHttpMemcachedChallengePtrOutput {
		return v.HttpMemcachedChallenge
	}).(AcmeCertificateHttpMemcachedChallengePtrOutput)
}

func (o AcmeCertificateOutput) HttpWebrootChallenge() AcmeCertificateHttpWebrootChallengePtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) AcmeCertificateHttpWebrootChallengePtrOutput { return v.HttpWebrootChallenge }).(AcmeCertificateHttpWebrootChallengePtrOutput)
}

func (o AcmeCertificateOutput) IssuerPem() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringOutput { return v.IssuerPem }).(pulumi.StringOutput)
}

func (o AcmeCertificateOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringPtrOutput { return v.KeyType }).(pulumi.StringPtrOutput)
}

func (o AcmeCertificateOutput) MinDaysRemaining() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.IntPtrOutput { return v.MinDaysRemaining }).(pulumi.IntPtrOutput)
}

func (o AcmeCertificateOutput) MustStaple() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.BoolPtrOutput { return v.MustStaple }).(pulumi.BoolPtrOutput)
}

func (o AcmeCertificateOutput) PreCheckDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.IntPtrOutput { return v.PreCheckDelay }).(pulumi.IntPtrOutput)
}

func (o AcmeCertificateOutput) PreferredChain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringPtrOutput { return v.PreferredChain }).(pulumi.StringPtrOutput)
}

func (o AcmeCertificateOutput) PrivateKeyPem() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringOutput { return v.PrivateKeyPem }).(pulumi.StringOutput)
}

func (o AcmeCertificateOutput) RecursiveNameservers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringArrayOutput { return v.RecursiveNameservers }).(pulumi.StringArrayOutput)
}

func (o AcmeCertificateOutput) RevokeCertificateOnDestroy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.BoolPtrOutput { return v.RevokeCertificateOnDestroy }).(pulumi.BoolPtrOutput)
}

func (o AcmeCertificateOutput) SubjectAlternativeNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AcmeCertificate) pulumi.StringArrayOutput { return v.SubjectAlternativeNames }).(pulumi.StringArrayOutput)
}

func (o AcmeCertificateOutput) TlsChallenge() AcmeCertificateTlsChallengePtrOutput {
	return o.ApplyT(func(v *AcmeCertificate) AcmeCertificateTlsChallengePtrOutput { return v.TlsChallenge }).(AcmeCertificateTlsChallengePtrOutput)
}

type AcmeCertificateArrayOutput struct{ *pulumi.OutputState }

func (AcmeCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AcmeCertificate)(nil)).Elem()
}

func (o AcmeCertificateArrayOutput) ToAcmeCertificateArrayOutput() AcmeCertificateArrayOutput {
	return o
}

func (o AcmeCertificateArrayOutput) ToAcmeCertificateArrayOutputWithContext(ctx context.Context) AcmeCertificateArrayOutput {
	return o
}

func (o AcmeCertificateArrayOutput) Index(i pulumi.IntInput) AcmeCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AcmeCertificate {
		return vs[0].([]*AcmeCertificate)[vs[1].(int)]
	}).(AcmeCertificateOutput)
}

type AcmeCertificateMapOutput struct{ *pulumi.OutputState }

func (AcmeCertificateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AcmeCertificate)(nil)).Elem()
}

func (o AcmeCertificateMapOutput) ToAcmeCertificateMapOutput() AcmeCertificateMapOutput {
	return o
}

func (o AcmeCertificateMapOutput) ToAcmeCertificateMapOutputWithContext(ctx context.Context) AcmeCertificateMapOutput {
	return o
}

func (o AcmeCertificateMapOutput) MapIndex(k pulumi.StringInput) AcmeCertificateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AcmeCertificate {
		return vs[0].(map[string]*AcmeCertificate)[vs[1].(string)]
	}).(AcmeCertificateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateInput)(nil)).Elem(), &AcmeCertificate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateArrayInput)(nil)).Elem(), AcmeCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateMapInput)(nil)).Elem(), AcmeCertificateMap{})
	pulumi.RegisterOutputType(AcmeCertificateOutput{})
	pulumi.RegisterOutputType(AcmeCertificateArrayOutput{})
	pulumi.RegisterOutputType(AcmeCertificateMapOutput{})
}
