// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acme

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AcmeCertificateDnsChallenge struct {
	Config   map[string]interface{} `pulumi:"config"`
	Provider string                 `pulumi:"provider"`
}

// AcmeCertificateDnsChallengeInput is an input type that accepts AcmeCertificateDnsChallengeArgs and AcmeCertificateDnsChallengeOutput values.
// You can construct a concrete instance of `AcmeCertificateDnsChallengeInput` via:
//
//	AcmeCertificateDnsChallengeArgs{...}
type AcmeCertificateDnsChallengeInput interface {
	pulumi.Input

	ToAcmeCertificateDnsChallengeOutput() AcmeCertificateDnsChallengeOutput
	ToAcmeCertificateDnsChallengeOutputWithContext(context.Context) AcmeCertificateDnsChallengeOutput
}

type AcmeCertificateDnsChallengeArgs struct {
	Config   pulumi.MapInput    `pulumi:"config"`
	Provider pulumi.StringInput `pulumi:"provider"`
}

func (AcmeCertificateDnsChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeCertificateDnsChallenge)(nil)).Elem()
}

func (i AcmeCertificateDnsChallengeArgs) ToAcmeCertificateDnsChallengeOutput() AcmeCertificateDnsChallengeOutput {
	return i.ToAcmeCertificateDnsChallengeOutputWithContext(context.Background())
}

func (i AcmeCertificateDnsChallengeArgs) ToAcmeCertificateDnsChallengeOutputWithContext(ctx context.Context) AcmeCertificateDnsChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateDnsChallengeOutput)
}

// AcmeCertificateDnsChallengeArrayInput is an input type that accepts AcmeCertificateDnsChallengeArray and AcmeCertificateDnsChallengeArrayOutput values.
// You can construct a concrete instance of `AcmeCertificateDnsChallengeArrayInput` via:
//
//	AcmeCertificateDnsChallengeArray{ AcmeCertificateDnsChallengeArgs{...} }
type AcmeCertificateDnsChallengeArrayInput interface {
	pulumi.Input

	ToAcmeCertificateDnsChallengeArrayOutput() AcmeCertificateDnsChallengeArrayOutput
	ToAcmeCertificateDnsChallengeArrayOutputWithContext(context.Context) AcmeCertificateDnsChallengeArrayOutput
}

type AcmeCertificateDnsChallengeArray []AcmeCertificateDnsChallengeInput

func (AcmeCertificateDnsChallengeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcmeCertificateDnsChallenge)(nil)).Elem()
}

func (i AcmeCertificateDnsChallengeArray) ToAcmeCertificateDnsChallengeArrayOutput() AcmeCertificateDnsChallengeArrayOutput {
	return i.ToAcmeCertificateDnsChallengeArrayOutputWithContext(context.Background())
}

func (i AcmeCertificateDnsChallengeArray) ToAcmeCertificateDnsChallengeArrayOutputWithContext(ctx context.Context) AcmeCertificateDnsChallengeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateDnsChallengeArrayOutput)
}

type AcmeCertificateDnsChallengeOutput struct{ *pulumi.OutputState }

func (AcmeCertificateDnsChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeCertificateDnsChallenge)(nil)).Elem()
}

func (o AcmeCertificateDnsChallengeOutput) ToAcmeCertificateDnsChallengeOutput() AcmeCertificateDnsChallengeOutput {
	return o
}

func (o AcmeCertificateDnsChallengeOutput) ToAcmeCertificateDnsChallengeOutputWithContext(ctx context.Context) AcmeCertificateDnsChallengeOutput {
	return o
}

func (o AcmeCertificateDnsChallengeOutput) Config() pulumi.MapOutput {
	return o.ApplyT(func(v AcmeCertificateDnsChallenge) map[string]interface{} { return v.Config }).(pulumi.MapOutput)
}

func (o AcmeCertificateDnsChallengeOutput) Provider() pulumi.StringOutput {
	return o.ApplyT(func(v AcmeCertificateDnsChallenge) string { return v.Provider }).(pulumi.StringOutput)
}

type AcmeCertificateDnsChallengeArrayOutput struct{ *pulumi.OutputState }

func (AcmeCertificateDnsChallengeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AcmeCertificateDnsChallenge)(nil)).Elem()
}

func (o AcmeCertificateDnsChallengeArrayOutput) ToAcmeCertificateDnsChallengeArrayOutput() AcmeCertificateDnsChallengeArrayOutput {
	return o
}

func (o AcmeCertificateDnsChallengeArrayOutput) ToAcmeCertificateDnsChallengeArrayOutputWithContext(ctx context.Context) AcmeCertificateDnsChallengeArrayOutput {
	return o
}

func (o AcmeCertificateDnsChallengeArrayOutput) Index(i pulumi.IntInput) AcmeCertificateDnsChallengeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AcmeCertificateDnsChallenge {
		return vs[0].([]AcmeCertificateDnsChallenge)[vs[1].(int)]
	}).(AcmeCertificateDnsChallengeOutput)
}

type AcmeCertificateHttpChallenge struct {
	Port        *int    `pulumi:"port"`
	ProxyHeader *string `pulumi:"proxyHeader"`
}

// AcmeCertificateHttpChallengeInput is an input type that accepts AcmeCertificateHttpChallengeArgs and AcmeCertificateHttpChallengeOutput values.
// You can construct a concrete instance of `AcmeCertificateHttpChallengeInput` via:
//
//	AcmeCertificateHttpChallengeArgs{...}
type AcmeCertificateHttpChallengeInput interface {
	pulumi.Input

	ToAcmeCertificateHttpChallengeOutput() AcmeCertificateHttpChallengeOutput
	ToAcmeCertificateHttpChallengeOutputWithContext(context.Context) AcmeCertificateHttpChallengeOutput
}

type AcmeCertificateHttpChallengeArgs struct {
	Port        pulumi.IntPtrInput    `pulumi:"port"`
	ProxyHeader pulumi.StringPtrInput `pulumi:"proxyHeader"`
}

func (AcmeCertificateHttpChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeCertificateHttpChallenge)(nil)).Elem()
}

func (i AcmeCertificateHttpChallengeArgs) ToAcmeCertificateHttpChallengeOutput() AcmeCertificateHttpChallengeOutput {
	return i.ToAcmeCertificateHttpChallengeOutputWithContext(context.Background())
}

func (i AcmeCertificateHttpChallengeArgs) ToAcmeCertificateHttpChallengeOutputWithContext(ctx context.Context) AcmeCertificateHttpChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateHttpChallengeOutput)
}

func (i AcmeCertificateHttpChallengeArgs) ToAcmeCertificateHttpChallengePtrOutput() AcmeCertificateHttpChallengePtrOutput {
	return i.ToAcmeCertificateHttpChallengePtrOutputWithContext(context.Background())
}

func (i AcmeCertificateHttpChallengeArgs) ToAcmeCertificateHttpChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateHttpChallengeOutput).ToAcmeCertificateHttpChallengePtrOutputWithContext(ctx)
}

// AcmeCertificateHttpChallengePtrInput is an input type that accepts AcmeCertificateHttpChallengeArgs, AcmeCertificateHttpChallengePtr and AcmeCertificateHttpChallengePtrOutput values.
// You can construct a concrete instance of `AcmeCertificateHttpChallengePtrInput` via:
//
//	        AcmeCertificateHttpChallengeArgs{...}
//
//	or:
//
//	        nil
type AcmeCertificateHttpChallengePtrInput interface {
	pulumi.Input

	ToAcmeCertificateHttpChallengePtrOutput() AcmeCertificateHttpChallengePtrOutput
	ToAcmeCertificateHttpChallengePtrOutputWithContext(context.Context) AcmeCertificateHttpChallengePtrOutput
}

type acmeCertificateHttpChallengePtrType AcmeCertificateHttpChallengeArgs

func AcmeCertificateHttpChallengePtr(v *AcmeCertificateHttpChallengeArgs) AcmeCertificateHttpChallengePtrInput {
	return (*acmeCertificateHttpChallengePtrType)(v)
}

func (*acmeCertificateHttpChallengePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeCertificateHttpChallenge)(nil)).Elem()
}

func (i *acmeCertificateHttpChallengePtrType) ToAcmeCertificateHttpChallengePtrOutput() AcmeCertificateHttpChallengePtrOutput {
	return i.ToAcmeCertificateHttpChallengePtrOutputWithContext(context.Background())
}

func (i *acmeCertificateHttpChallengePtrType) ToAcmeCertificateHttpChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateHttpChallengePtrOutput)
}

type AcmeCertificateHttpChallengeOutput struct{ *pulumi.OutputState }

func (AcmeCertificateHttpChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeCertificateHttpChallenge)(nil)).Elem()
}

func (o AcmeCertificateHttpChallengeOutput) ToAcmeCertificateHttpChallengeOutput() AcmeCertificateHttpChallengeOutput {
	return o
}

func (o AcmeCertificateHttpChallengeOutput) ToAcmeCertificateHttpChallengeOutputWithContext(ctx context.Context) AcmeCertificateHttpChallengeOutput {
	return o
}

func (o AcmeCertificateHttpChallengeOutput) ToAcmeCertificateHttpChallengePtrOutput() AcmeCertificateHttpChallengePtrOutput {
	return o.ToAcmeCertificateHttpChallengePtrOutputWithContext(context.Background())
}

func (o AcmeCertificateHttpChallengeOutput) ToAcmeCertificateHttpChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpChallengePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AcmeCertificateHttpChallenge) *AcmeCertificateHttpChallenge {
		return &v
	}).(AcmeCertificateHttpChallengePtrOutput)
}

func (o AcmeCertificateHttpChallengeOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AcmeCertificateHttpChallenge) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o AcmeCertificateHttpChallengeOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AcmeCertificateHttpChallenge) *string { return v.ProxyHeader }).(pulumi.StringPtrOutput)
}

type AcmeCertificateHttpChallengePtrOutput struct{ *pulumi.OutputState }

func (AcmeCertificateHttpChallengePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeCertificateHttpChallenge)(nil)).Elem()
}

func (o AcmeCertificateHttpChallengePtrOutput) ToAcmeCertificateHttpChallengePtrOutput() AcmeCertificateHttpChallengePtrOutput {
	return o
}

func (o AcmeCertificateHttpChallengePtrOutput) ToAcmeCertificateHttpChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpChallengePtrOutput {
	return o
}

func (o AcmeCertificateHttpChallengePtrOutput) Elem() AcmeCertificateHttpChallengeOutput {
	return o.ApplyT(func(v *AcmeCertificateHttpChallenge) AcmeCertificateHttpChallenge {
		if v != nil {
			return *v
		}
		var ret AcmeCertificateHttpChallenge
		return ret
	}).(AcmeCertificateHttpChallengeOutput)
}

func (o AcmeCertificateHttpChallengePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AcmeCertificateHttpChallenge) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

func (o AcmeCertificateHttpChallengePtrOutput) ProxyHeader() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcmeCertificateHttpChallenge) *string {
		if v == nil {
			return nil
		}
		return v.ProxyHeader
	}).(pulumi.StringPtrOutput)
}

type AcmeCertificateHttpMemcachedChallenge struct {
	Hosts []string `pulumi:"hosts"`
}

// AcmeCertificateHttpMemcachedChallengeInput is an input type that accepts AcmeCertificateHttpMemcachedChallengeArgs and AcmeCertificateHttpMemcachedChallengeOutput values.
// You can construct a concrete instance of `AcmeCertificateHttpMemcachedChallengeInput` via:
//
//	AcmeCertificateHttpMemcachedChallengeArgs{...}
type AcmeCertificateHttpMemcachedChallengeInput interface {
	pulumi.Input

	ToAcmeCertificateHttpMemcachedChallengeOutput() AcmeCertificateHttpMemcachedChallengeOutput
	ToAcmeCertificateHttpMemcachedChallengeOutputWithContext(context.Context) AcmeCertificateHttpMemcachedChallengeOutput
}

type AcmeCertificateHttpMemcachedChallengeArgs struct {
	Hosts pulumi.StringArrayInput `pulumi:"hosts"`
}

func (AcmeCertificateHttpMemcachedChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeCertificateHttpMemcachedChallenge)(nil)).Elem()
}

func (i AcmeCertificateHttpMemcachedChallengeArgs) ToAcmeCertificateHttpMemcachedChallengeOutput() AcmeCertificateHttpMemcachedChallengeOutput {
	return i.ToAcmeCertificateHttpMemcachedChallengeOutputWithContext(context.Background())
}

func (i AcmeCertificateHttpMemcachedChallengeArgs) ToAcmeCertificateHttpMemcachedChallengeOutputWithContext(ctx context.Context) AcmeCertificateHttpMemcachedChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateHttpMemcachedChallengeOutput)
}

func (i AcmeCertificateHttpMemcachedChallengeArgs) ToAcmeCertificateHttpMemcachedChallengePtrOutput() AcmeCertificateHttpMemcachedChallengePtrOutput {
	return i.ToAcmeCertificateHttpMemcachedChallengePtrOutputWithContext(context.Background())
}

func (i AcmeCertificateHttpMemcachedChallengeArgs) ToAcmeCertificateHttpMemcachedChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpMemcachedChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateHttpMemcachedChallengeOutput).ToAcmeCertificateHttpMemcachedChallengePtrOutputWithContext(ctx)
}

// AcmeCertificateHttpMemcachedChallengePtrInput is an input type that accepts AcmeCertificateHttpMemcachedChallengeArgs, AcmeCertificateHttpMemcachedChallengePtr and AcmeCertificateHttpMemcachedChallengePtrOutput values.
// You can construct a concrete instance of `AcmeCertificateHttpMemcachedChallengePtrInput` via:
//
//	        AcmeCertificateHttpMemcachedChallengeArgs{...}
//
//	or:
//
//	        nil
type AcmeCertificateHttpMemcachedChallengePtrInput interface {
	pulumi.Input

	ToAcmeCertificateHttpMemcachedChallengePtrOutput() AcmeCertificateHttpMemcachedChallengePtrOutput
	ToAcmeCertificateHttpMemcachedChallengePtrOutputWithContext(context.Context) AcmeCertificateHttpMemcachedChallengePtrOutput
}

type acmeCertificateHttpMemcachedChallengePtrType AcmeCertificateHttpMemcachedChallengeArgs

func AcmeCertificateHttpMemcachedChallengePtr(v *AcmeCertificateHttpMemcachedChallengeArgs) AcmeCertificateHttpMemcachedChallengePtrInput {
	return (*acmeCertificateHttpMemcachedChallengePtrType)(v)
}

func (*acmeCertificateHttpMemcachedChallengePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeCertificateHttpMemcachedChallenge)(nil)).Elem()
}

func (i *acmeCertificateHttpMemcachedChallengePtrType) ToAcmeCertificateHttpMemcachedChallengePtrOutput() AcmeCertificateHttpMemcachedChallengePtrOutput {
	return i.ToAcmeCertificateHttpMemcachedChallengePtrOutputWithContext(context.Background())
}

func (i *acmeCertificateHttpMemcachedChallengePtrType) ToAcmeCertificateHttpMemcachedChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpMemcachedChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateHttpMemcachedChallengePtrOutput)
}

type AcmeCertificateHttpMemcachedChallengeOutput struct{ *pulumi.OutputState }

func (AcmeCertificateHttpMemcachedChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeCertificateHttpMemcachedChallenge)(nil)).Elem()
}

func (o AcmeCertificateHttpMemcachedChallengeOutput) ToAcmeCertificateHttpMemcachedChallengeOutput() AcmeCertificateHttpMemcachedChallengeOutput {
	return o
}

func (o AcmeCertificateHttpMemcachedChallengeOutput) ToAcmeCertificateHttpMemcachedChallengeOutputWithContext(ctx context.Context) AcmeCertificateHttpMemcachedChallengeOutput {
	return o
}

func (o AcmeCertificateHttpMemcachedChallengeOutput) ToAcmeCertificateHttpMemcachedChallengePtrOutput() AcmeCertificateHttpMemcachedChallengePtrOutput {
	return o.ToAcmeCertificateHttpMemcachedChallengePtrOutputWithContext(context.Background())
}

func (o AcmeCertificateHttpMemcachedChallengeOutput) ToAcmeCertificateHttpMemcachedChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpMemcachedChallengePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AcmeCertificateHttpMemcachedChallenge) *AcmeCertificateHttpMemcachedChallenge {
		return &v
	}).(AcmeCertificateHttpMemcachedChallengePtrOutput)
}

func (o AcmeCertificateHttpMemcachedChallengeOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AcmeCertificateHttpMemcachedChallenge) []string { return v.Hosts }).(pulumi.StringArrayOutput)
}

type AcmeCertificateHttpMemcachedChallengePtrOutput struct{ *pulumi.OutputState }

func (AcmeCertificateHttpMemcachedChallengePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeCertificateHttpMemcachedChallenge)(nil)).Elem()
}

func (o AcmeCertificateHttpMemcachedChallengePtrOutput) ToAcmeCertificateHttpMemcachedChallengePtrOutput() AcmeCertificateHttpMemcachedChallengePtrOutput {
	return o
}

func (o AcmeCertificateHttpMemcachedChallengePtrOutput) ToAcmeCertificateHttpMemcachedChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpMemcachedChallengePtrOutput {
	return o
}

func (o AcmeCertificateHttpMemcachedChallengePtrOutput) Elem() AcmeCertificateHttpMemcachedChallengeOutput {
	return o.ApplyT(func(v *AcmeCertificateHttpMemcachedChallenge) AcmeCertificateHttpMemcachedChallenge {
		if v != nil {
			return *v
		}
		var ret AcmeCertificateHttpMemcachedChallenge
		return ret
	}).(AcmeCertificateHttpMemcachedChallengeOutput)
}

func (o AcmeCertificateHttpMemcachedChallengePtrOutput) Hosts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AcmeCertificateHttpMemcachedChallenge) []string {
		if v == nil {
			return nil
		}
		return v.Hosts
	}).(pulumi.StringArrayOutput)
}

type AcmeCertificateHttpWebrootChallenge struct {
	Directory string `pulumi:"directory"`
}

// AcmeCertificateHttpWebrootChallengeInput is an input type that accepts AcmeCertificateHttpWebrootChallengeArgs and AcmeCertificateHttpWebrootChallengeOutput values.
// You can construct a concrete instance of `AcmeCertificateHttpWebrootChallengeInput` via:
//
//	AcmeCertificateHttpWebrootChallengeArgs{...}
type AcmeCertificateHttpWebrootChallengeInput interface {
	pulumi.Input

	ToAcmeCertificateHttpWebrootChallengeOutput() AcmeCertificateHttpWebrootChallengeOutput
	ToAcmeCertificateHttpWebrootChallengeOutputWithContext(context.Context) AcmeCertificateHttpWebrootChallengeOutput
}

type AcmeCertificateHttpWebrootChallengeArgs struct {
	Directory pulumi.StringInput `pulumi:"directory"`
}

func (AcmeCertificateHttpWebrootChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeCertificateHttpWebrootChallenge)(nil)).Elem()
}

func (i AcmeCertificateHttpWebrootChallengeArgs) ToAcmeCertificateHttpWebrootChallengeOutput() AcmeCertificateHttpWebrootChallengeOutput {
	return i.ToAcmeCertificateHttpWebrootChallengeOutputWithContext(context.Background())
}

func (i AcmeCertificateHttpWebrootChallengeArgs) ToAcmeCertificateHttpWebrootChallengeOutputWithContext(ctx context.Context) AcmeCertificateHttpWebrootChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateHttpWebrootChallengeOutput)
}

func (i AcmeCertificateHttpWebrootChallengeArgs) ToAcmeCertificateHttpWebrootChallengePtrOutput() AcmeCertificateHttpWebrootChallengePtrOutput {
	return i.ToAcmeCertificateHttpWebrootChallengePtrOutputWithContext(context.Background())
}

func (i AcmeCertificateHttpWebrootChallengeArgs) ToAcmeCertificateHttpWebrootChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpWebrootChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateHttpWebrootChallengeOutput).ToAcmeCertificateHttpWebrootChallengePtrOutputWithContext(ctx)
}

// AcmeCertificateHttpWebrootChallengePtrInput is an input type that accepts AcmeCertificateHttpWebrootChallengeArgs, AcmeCertificateHttpWebrootChallengePtr and AcmeCertificateHttpWebrootChallengePtrOutput values.
// You can construct a concrete instance of `AcmeCertificateHttpWebrootChallengePtrInput` via:
//
//	        AcmeCertificateHttpWebrootChallengeArgs{...}
//
//	or:
//
//	        nil
type AcmeCertificateHttpWebrootChallengePtrInput interface {
	pulumi.Input

	ToAcmeCertificateHttpWebrootChallengePtrOutput() AcmeCertificateHttpWebrootChallengePtrOutput
	ToAcmeCertificateHttpWebrootChallengePtrOutputWithContext(context.Context) AcmeCertificateHttpWebrootChallengePtrOutput
}

type acmeCertificateHttpWebrootChallengePtrType AcmeCertificateHttpWebrootChallengeArgs

func AcmeCertificateHttpWebrootChallengePtr(v *AcmeCertificateHttpWebrootChallengeArgs) AcmeCertificateHttpWebrootChallengePtrInput {
	return (*acmeCertificateHttpWebrootChallengePtrType)(v)
}

func (*acmeCertificateHttpWebrootChallengePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeCertificateHttpWebrootChallenge)(nil)).Elem()
}

func (i *acmeCertificateHttpWebrootChallengePtrType) ToAcmeCertificateHttpWebrootChallengePtrOutput() AcmeCertificateHttpWebrootChallengePtrOutput {
	return i.ToAcmeCertificateHttpWebrootChallengePtrOutputWithContext(context.Background())
}

func (i *acmeCertificateHttpWebrootChallengePtrType) ToAcmeCertificateHttpWebrootChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpWebrootChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateHttpWebrootChallengePtrOutput)
}

type AcmeCertificateHttpWebrootChallengeOutput struct{ *pulumi.OutputState }

func (AcmeCertificateHttpWebrootChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeCertificateHttpWebrootChallenge)(nil)).Elem()
}

func (o AcmeCertificateHttpWebrootChallengeOutput) ToAcmeCertificateHttpWebrootChallengeOutput() AcmeCertificateHttpWebrootChallengeOutput {
	return o
}

func (o AcmeCertificateHttpWebrootChallengeOutput) ToAcmeCertificateHttpWebrootChallengeOutputWithContext(ctx context.Context) AcmeCertificateHttpWebrootChallengeOutput {
	return o
}

func (o AcmeCertificateHttpWebrootChallengeOutput) ToAcmeCertificateHttpWebrootChallengePtrOutput() AcmeCertificateHttpWebrootChallengePtrOutput {
	return o.ToAcmeCertificateHttpWebrootChallengePtrOutputWithContext(context.Background())
}

func (o AcmeCertificateHttpWebrootChallengeOutput) ToAcmeCertificateHttpWebrootChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpWebrootChallengePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AcmeCertificateHttpWebrootChallenge) *AcmeCertificateHttpWebrootChallenge {
		return &v
	}).(AcmeCertificateHttpWebrootChallengePtrOutput)
}

func (o AcmeCertificateHttpWebrootChallengeOutput) Directory() pulumi.StringOutput {
	return o.ApplyT(func(v AcmeCertificateHttpWebrootChallenge) string { return v.Directory }).(pulumi.StringOutput)
}

type AcmeCertificateHttpWebrootChallengePtrOutput struct{ *pulumi.OutputState }

func (AcmeCertificateHttpWebrootChallengePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeCertificateHttpWebrootChallenge)(nil)).Elem()
}

func (o AcmeCertificateHttpWebrootChallengePtrOutput) ToAcmeCertificateHttpWebrootChallengePtrOutput() AcmeCertificateHttpWebrootChallengePtrOutput {
	return o
}

func (o AcmeCertificateHttpWebrootChallengePtrOutput) ToAcmeCertificateHttpWebrootChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateHttpWebrootChallengePtrOutput {
	return o
}

func (o AcmeCertificateHttpWebrootChallengePtrOutput) Elem() AcmeCertificateHttpWebrootChallengeOutput {
	return o.ApplyT(func(v *AcmeCertificateHttpWebrootChallenge) AcmeCertificateHttpWebrootChallenge {
		if v != nil {
			return *v
		}
		var ret AcmeCertificateHttpWebrootChallenge
		return ret
	}).(AcmeCertificateHttpWebrootChallengeOutput)
}

func (o AcmeCertificateHttpWebrootChallengePtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcmeCertificateHttpWebrootChallenge) *string {
		if v == nil {
			return nil
		}
		return &v.Directory
	}).(pulumi.StringPtrOutput)
}

type AcmeCertificateTlsChallenge struct {
	Port *int `pulumi:"port"`
}

// AcmeCertificateTlsChallengeInput is an input type that accepts AcmeCertificateTlsChallengeArgs and AcmeCertificateTlsChallengeOutput values.
// You can construct a concrete instance of `AcmeCertificateTlsChallengeInput` via:
//
//	AcmeCertificateTlsChallengeArgs{...}
type AcmeCertificateTlsChallengeInput interface {
	pulumi.Input

	ToAcmeCertificateTlsChallengeOutput() AcmeCertificateTlsChallengeOutput
	ToAcmeCertificateTlsChallengeOutputWithContext(context.Context) AcmeCertificateTlsChallengeOutput
}

type AcmeCertificateTlsChallengeArgs struct {
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (AcmeCertificateTlsChallengeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeCertificateTlsChallenge)(nil)).Elem()
}

func (i AcmeCertificateTlsChallengeArgs) ToAcmeCertificateTlsChallengeOutput() AcmeCertificateTlsChallengeOutput {
	return i.ToAcmeCertificateTlsChallengeOutputWithContext(context.Background())
}

func (i AcmeCertificateTlsChallengeArgs) ToAcmeCertificateTlsChallengeOutputWithContext(ctx context.Context) AcmeCertificateTlsChallengeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateTlsChallengeOutput)
}

func (i AcmeCertificateTlsChallengeArgs) ToAcmeCertificateTlsChallengePtrOutput() AcmeCertificateTlsChallengePtrOutput {
	return i.ToAcmeCertificateTlsChallengePtrOutputWithContext(context.Background())
}

func (i AcmeCertificateTlsChallengeArgs) ToAcmeCertificateTlsChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateTlsChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateTlsChallengeOutput).ToAcmeCertificateTlsChallengePtrOutputWithContext(ctx)
}

// AcmeCertificateTlsChallengePtrInput is an input type that accepts AcmeCertificateTlsChallengeArgs, AcmeCertificateTlsChallengePtr and AcmeCertificateTlsChallengePtrOutput values.
// You can construct a concrete instance of `AcmeCertificateTlsChallengePtrInput` via:
//
//	        AcmeCertificateTlsChallengeArgs{...}
//
//	or:
//
//	        nil
type AcmeCertificateTlsChallengePtrInput interface {
	pulumi.Input

	ToAcmeCertificateTlsChallengePtrOutput() AcmeCertificateTlsChallengePtrOutput
	ToAcmeCertificateTlsChallengePtrOutputWithContext(context.Context) AcmeCertificateTlsChallengePtrOutput
}

type acmeCertificateTlsChallengePtrType AcmeCertificateTlsChallengeArgs

func AcmeCertificateTlsChallengePtr(v *AcmeCertificateTlsChallengeArgs) AcmeCertificateTlsChallengePtrInput {
	return (*acmeCertificateTlsChallengePtrType)(v)
}

func (*acmeCertificateTlsChallengePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeCertificateTlsChallenge)(nil)).Elem()
}

func (i *acmeCertificateTlsChallengePtrType) ToAcmeCertificateTlsChallengePtrOutput() AcmeCertificateTlsChallengePtrOutput {
	return i.ToAcmeCertificateTlsChallengePtrOutputWithContext(context.Background())
}

func (i *acmeCertificateTlsChallengePtrType) ToAcmeCertificateTlsChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateTlsChallengePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeCertificateTlsChallengePtrOutput)
}

type AcmeCertificateTlsChallengeOutput struct{ *pulumi.OutputState }

func (AcmeCertificateTlsChallengeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeCertificateTlsChallenge)(nil)).Elem()
}

func (o AcmeCertificateTlsChallengeOutput) ToAcmeCertificateTlsChallengeOutput() AcmeCertificateTlsChallengeOutput {
	return o
}

func (o AcmeCertificateTlsChallengeOutput) ToAcmeCertificateTlsChallengeOutputWithContext(ctx context.Context) AcmeCertificateTlsChallengeOutput {
	return o
}

func (o AcmeCertificateTlsChallengeOutput) ToAcmeCertificateTlsChallengePtrOutput() AcmeCertificateTlsChallengePtrOutput {
	return o.ToAcmeCertificateTlsChallengePtrOutputWithContext(context.Background())
}

func (o AcmeCertificateTlsChallengeOutput) ToAcmeCertificateTlsChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateTlsChallengePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AcmeCertificateTlsChallenge) *AcmeCertificateTlsChallenge {
		return &v
	}).(AcmeCertificateTlsChallengePtrOutput)
}

func (o AcmeCertificateTlsChallengeOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AcmeCertificateTlsChallenge) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type AcmeCertificateTlsChallengePtrOutput struct{ *pulumi.OutputState }

func (AcmeCertificateTlsChallengePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeCertificateTlsChallenge)(nil)).Elem()
}

func (o AcmeCertificateTlsChallengePtrOutput) ToAcmeCertificateTlsChallengePtrOutput() AcmeCertificateTlsChallengePtrOutput {
	return o
}

func (o AcmeCertificateTlsChallengePtrOutput) ToAcmeCertificateTlsChallengePtrOutputWithContext(ctx context.Context) AcmeCertificateTlsChallengePtrOutput {
	return o
}

func (o AcmeCertificateTlsChallengePtrOutput) Elem() AcmeCertificateTlsChallengeOutput {
	return o.ApplyT(func(v *AcmeCertificateTlsChallenge) AcmeCertificateTlsChallenge {
		if v != nil {
			return *v
		}
		var ret AcmeCertificateTlsChallenge
		return ret
	}).(AcmeCertificateTlsChallengeOutput)
}

func (o AcmeCertificateTlsChallengePtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *AcmeCertificateTlsChallenge) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

type AcmeRegistrationExternalAccountBinding struct {
	HmacBase64 string `pulumi:"hmacBase64"`
	KeyId      string `pulumi:"keyId"`
}

// AcmeRegistrationExternalAccountBindingInput is an input type that accepts AcmeRegistrationExternalAccountBindingArgs and AcmeRegistrationExternalAccountBindingOutput values.
// You can construct a concrete instance of `AcmeRegistrationExternalAccountBindingInput` via:
//
//	AcmeRegistrationExternalAccountBindingArgs{...}
type AcmeRegistrationExternalAccountBindingInput interface {
	pulumi.Input

	ToAcmeRegistrationExternalAccountBindingOutput() AcmeRegistrationExternalAccountBindingOutput
	ToAcmeRegistrationExternalAccountBindingOutputWithContext(context.Context) AcmeRegistrationExternalAccountBindingOutput
}

type AcmeRegistrationExternalAccountBindingArgs struct {
	HmacBase64 pulumi.StringInput `pulumi:"hmacBase64"`
	KeyId      pulumi.StringInput `pulumi:"keyId"`
}

func (AcmeRegistrationExternalAccountBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeRegistrationExternalAccountBinding)(nil)).Elem()
}

func (i AcmeRegistrationExternalAccountBindingArgs) ToAcmeRegistrationExternalAccountBindingOutput() AcmeRegistrationExternalAccountBindingOutput {
	return i.ToAcmeRegistrationExternalAccountBindingOutputWithContext(context.Background())
}

func (i AcmeRegistrationExternalAccountBindingArgs) ToAcmeRegistrationExternalAccountBindingOutputWithContext(ctx context.Context) AcmeRegistrationExternalAccountBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeRegistrationExternalAccountBindingOutput)
}

func (i AcmeRegistrationExternalAccountBindingArgs) ToAcmeRegistrationExternalAccountBindingPtrOutput() AcmeRegistrationExternalAccountBindingPtrOutput {
	return i.ToAcmeRegistrationExternalAccountBindingPtrOutputWithContext(context.Background())
}

func (i AcmeRegistrationExternalAccountBindingArgs) ToAcmeRegistrationExternalAccountBindingPtrOutputWithContext(ctx context.Context) AcmeRegistrationExternalAccountBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeRegistrationExternalAccountBindingOutput).ToAcmeRegistrationExternalAccountBindingPtrOutputWithContext(ctx)
}

// AcmeRegistrationExternalAccountBindingPtrInput is an input type that accepts AcmeRegistrationExternalAccountBindingArgs, AcmeRegistrationExternalAccountBindingPtr and AcmeRegistrationExternalAccountBindingPtrOutput values.
// You can construct a concrete instance of `AcmeRegistrationExternalAccountBindingPtrInput` via:
//
//	        AcmeRegistrationExternalAccountBindingArgs{...}
//
//	or:
//
//	        nil
type AcmeRegistrationExternalAccountBindingPtrInput interface {
	pulumi.Input

	ToAcmeRegistrationExternalAccountBindingPtrOutput() AcmeRegistrationExternalAccountBindingPtrOutput
	ToAcmeRegistrationExternalAccountBindingPtrOutputWithContext(context.Context) AcmeRegistrationExternalAccountBindingPtrOutput
}

type acmeRegistrationExternalAccountBindingPtrType AcmeRegistrationExternalAccountBindingArgs

func AcmeRegistrationExternalAccountBindingPtr(v *AcmeRegistrationExternalAccountBindingArgs) AcmeRegistrationExternalAccountBindingPtrInput {
	return (*acmeRegistrationExternalAccountBindingPtrType)(v)
}

func (*acmeRegistrationExternalAccountBindingPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeRegistrationExternalAccountBinding)(nil)).Elem()
}

func (i *acmeRegistrationExternalAccountBindingPtrType) ToAcmeRegistrationExternalAccountBindingPtrOutput() AcmeRegistrationExternalAccountBindingPtrOutput {
	return i.ToAcmeRegistrationExternalAccountBindingPtrOutputWithContext(context.Background())
}

func (i *acmeRegistrationExternalAccountBindingPtrType) ToAcmeRegistrationExternalAccountBindingPtrOutputWithContext(ctx context.Context) AcmeRegistrationExternalAccountBindingPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeRegistrationExternalAccountBindingPtrOutput)
}

type AcmeRegistrationExternalAccountBindingOutput struct{ *pulumi.OutputState }

func (AcmeRegistrationExternalAccountBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AcmeRegistrationExternalAccountBinding)(nil)).Elem()
}

func (o AcmeRegistrationExternalAccountBindingOutput) ToAcmeRegistrationExternalAccountBindingOutput() AcmeRegistrationExternalAccountBindingOutput {
	return o
}

func (o AcmeRegistrationExternalAccountBindingOutput) ToAcmeRegistrationExternalAccountBindingOutputWithContext(ctx context.Context) AcmeRegistrationExternalAccountBindingOutput {
	return o
}

func (o AcmeRegistrationExternalAccountBindingOutput) ToAcmeRegistrationExternalAccountBindingPtrOutput() AcmeRegistrationExternalAccountBindingPtrOutput {
	return o.ToAcmeRegistrationExternalAccountBindingPtrOutputWithContext(context.Background())
}

func (o AcmeRegistrationExternalAccountBindingOutput) ToAcmeRegistrationExternalAccountBindingPtrOutputWithContext(ctx context.Context) AcmeRegistrationExternalAccountBindingPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AcmeRegistrationExternalAccountBinding) *AcmeRegistrationExternalAccountBinding {
		return &v
	}).(AcmeRegistrationExternalAccountBindingPtrOutput)
}

func (o AcmeRegistrationExternalAccountBindingOutput) HmacBase64() pulumi.StringOutput {
	return o.ApplyT(func(v AcmeRegistrationExternalAccountBinding) string { return v.HmacBase64 }).(pulumi.StringOutput)
}

func (o AcmeRegistrationExternalAccountBindingOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v AcmeRegistrationExternalAccountBinding) string { return v.KeyId }).(pulumi.StringOutput)
}

type AcmeRegistrationExternalAccountBindingPtrOutput struct{ *pulumi.OutputState }

func (AcmeRegistrationExternalAccountBindingPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeRegistrationExternalAccountBinding)(nil)).Elem()
}

func (o AcmeRegistrationExternalAccountBindingPtrOutput) ToAcmeRegistrationExternalAccountBindingPtrOutput() AcmeRegistrationExternalAccountBindingPtrOutput {
	return o
}

func (o AcmeRegistrationExternalAccountBindingPtrOutput) ToAcmeRegistrationExternalAccountBindingPtrOutputWithContext(ctx context.Context) AcmeRegistrationExternalAccountBindingPtrOutput {
	return o
}

func (o AcmeRegistrationExternalAccountBindingPtrOutput) Elem() AcmeRegistrationExternalAccountBindingOutput {
	return o.ApplyT(func(v *AcmeRegistrationExternalAccountBinding) AcmeRegistrationExternalAccountBinding {
		if v != nil {
			return *v
		}
		var ret AcmeRegistrationExternalAccountBinding
		return ret
	}).(AcmeRegistrationExternalAccountBindingOutput)
}

func (o AcmeRegistrationExternalAccountBindingPtrOutput) HmacBase64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcmeRegistrationExternalAccountBinding) *string {
		if v == nil {
			return nil
		}
		return &v.HmacBase64
	}).(pulumi.StringPtrOutput)
}

func (o AcmeRegistrationExternalAccountBindingPtrOutput) KeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AcmeRegistrationExternalAccountBinding) *string {
		if v == nil {
			return nil
		}
		return &v.KeyId
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateDnsChallengeInput)(nil)).Elem(), AcmeCertificateDnsChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateDnsChallengeArrayInput)(nil)).Elem(), AcmeCertificateDnsChallengeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateHttpChallengeInput)(nil)).Elem(), AcmeCertificateHttpChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateHttpChallengePtrInput)(nil)).Elem(), AcmeCertificateHttpChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateHttpMemcachedChallengeInput)(nil)).Elem(), AcmeCertificateHttpMemcachedChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateHttpMemcachedChallengePtrInput)(nil)).Elem(), AcmeCertificateHttpMemcachedChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateHttpWebrootChallengeInput)(nil)).Elem(), AcmeCertificateHttpWebrootChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateHttpWebrootChallengePtrInput)(nil)).Elem(), AcmeCertificateHttpWebrootChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateTlsChallengeInput)(nil)).Elem(), AcmeCertificateTlsChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeCertificateTlsChallengePtrInput)(nil)).Elem(), AcmeCertificateTlsChallengeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeRegistrationExternalAccountBindingInput)(nil)).Elem(), AcmeRegistrationExternalAccountBindingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeRegistrationExternalAccountBindingPtrInput)(nil)).Elem(), AcmeRegistrationExternalAccountBindingArgs{})
	pulumi.RegisterOutputType(AcmeCertificateDnsChallengeOutput{})
	pulumi.RegisterOutputType(AcmeCertificateDnsChallengeArrayOutput{})
	pulumi.RegisterOutputType(AcmeCertificateHttpChallengeOutput{})
	pulumi.RegisterOutputType(AcmeCertificateHttpChallengePtrOutput{})
	pulumi.RegisterOutputType(AcmeCertificateHttpMemcachedChallengeOutput{})
	pulumi.RegisterOutputType(AcmeCertificateHttpMemcachedChallengePtrOutput{})
	pulumi.RegisterOutputType(AcmeCertificateHttpWebrootChallengeOutput{})
	pulumi.RegisterOutputType(AcmeCertificateHttpWebrootChallengePtrOutput{})
	pulumi.RegisterOutputType(AcmeCertificateTlsChallengeOutput{})
	pulumi.RegisterOutputType(AcmeCertificateTlsChallengePtrOutput{})
	pulumi.RegisterOutputType(AcmeRegistrationExternalAccountBindingOutput{})
	pulumi.RegisterOutputType(AcmeRegistrationExternalAccountBindingPtrOutput{})
}
