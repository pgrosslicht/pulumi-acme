// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package acme

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AcmeRegistration struct {
	pulumi.CustomResourceState

	AccountKeyPem          pulumi.StringOutput                             `pulumi:"accountKeyPem"`
	EmailAddress           pulumi.StringOutput                             `pulumi:"emailAddress"`
	ExternalAccountBinding AcmeRegistrationExternalAccountBindingPtrOutput `pulumi:"externalAccountBinding"`
	RegistrationUrl        pulumi.StringOutput                             `pulumi:"registrationUrl"`
}

// NewAcmeRegistration registers a new resource with the given unique name, arguments, and options.
func NewAcmeRegistration(ctx *pulumi.Context,
	name string, args *AcmeRegistrationArgs, opts ...pulumi.ResourceOption) (*AcmeRegistration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountKeyPem == nil {
		return nil, errors.New("invalid value for required argument 'AccountKeyPem'")
	}
	if args.EmailAddress == nil {
		return nil, errors.New("invalid value for required argument 'EmailAddress'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AcmeRegistration
	err := ctx.RegisterResource("acme:index/acmeRegistration:AcmeRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAcmeRegistration gets an existing AcmeRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAcmeRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AcmeRegistrationState, opts ...pulumi.ResourceOption) (*AcmeRegistration, error) {
	var resource AcmeRegistration
	err := ctx.ReadResource("acme:index/acmeRegistration:AcmeRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AcmeRegistration resources.
type acmeRegistrationState struct {
	AccountKeyPem          *string                                 `pulumi:"accountKeyPem"`
	EmailAddress           *string                                 `pulumi:"emailAddress"`
	ExternalAccountBinding *AcmeRegistrationExternalAccountBinding `pulumi:"externalAccountBinding"`
	RegistrationUrl        *string                                 `pulumi:"registrationUrl"`
}

type AcmeRegistrationState struct {
	AccountKeyPem          pulumi.StringPtrInput
	EmailAddress           pulumi.StringPtrInput
	ExternalAccountBinding AcmeRegistrationExternalAccountBindingPtrInput
	RegistrationUrl        pulumi.StringPtrInput
}

func (AcmeRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*acmeRegistrationState)(nil)).Elem()
}

type acmeRegistrationArgs struct {
	AccountKeyPem          string                                  `pulumi:"accountKeyPem"`
	EmailAddress           string                                  `pulumi:"emailAddress"`
	ExternalAccountBinding *AcmeRegistrationExternalAccountBinding `pulumi:"externalAccountBinding"`
}

// The set of arguments for constructing a AcmeRegistration resource.
type AcmeRegistrationArgs struct {
	AccountKeyPem          pulumi.StringInput
	EmailAddress           pulumi.StringInput
	ExternalAccountBinding AcmeRegistrationExternalAccountBindingPtrInput
}

func (AcmeRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*acmeRegistrationArgs)(nil)).Elem()
}

type AcmeRegistrationInput interface {
	pulumi.Input

	ToAcmeRegistrationOutput() AcmeRegistrationOutput
	ToAcmeRegistrationOutputWithContext(ctx context.Context) AcmeRegistrationOutput
}

func (*AcmeRegistration) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeRegistration)(nil)).Elem()
}

func (i *AcmeRegistration) ToAcmeRegistrationOutput() AcmeRegistrationOutput {
	return i.ToAcmeRegistrationOutputWithContext(context.Background())
}

func (i *AcmeRegistration) ToAcmeRegistrationOutputWithContext(ctx context.Context) AcmeRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeRegistrationOutput)
}

// AcmeRegistrationArrayInput is an input type that accepts AcmeRegistrationArray and AcmeRegistrationArrayOutput values.
// You can construct a concrete instance of `AcmeRegistrationArrayInput` via:
//
//	AcmeRegistrationArray{ AcmeRegistrationArgs{...} }
type AcmeRegistrationArrayInput interface {
	pulumi.Input

	ToAcmeRegistrationArrayOutput() AcmeRegistrationArrayOutput
	ToAcmeRegistrationArrayOutputWithContext(context.Context) AcmeRegistrationArrayOutput
}

type AcmeRegistrationArray []AcmeRegistrationInput

func (AcmeRegistrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AcmeRegistration)(nil)).Elem()
}

func (i AcmeRegistrationArray) ToAcmeRegistrationArrayOutput() AcmeRegistrationArrayOutput {
	return i.ToAcmeRegistrationArrayOutputWithContext(context.Background())
}

func (i AcmeRegistrationArray) ToAcmeRegistrationArrayOutputWithContext(ctx context.Context) AcmeRegistrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeRegistrationArrayOutput)
}

// AcmeRegistrationMapInput is an input type that accepts AcmeRegistrationMap and AcmeRegistrationMapOutput values.
// You can construct a concrete instance of `AcmeRegistrationMapInput` via:
//
//	AcmeRegistrationMap{ "key": AcmeRegistrationArgs{...} }
type AcmeRegistrationMapInput interface {
	pulumi.Input

	ToAcmeRegistrationMapOutput() AcmeRegistrationMapOutput
	ToAcmeRegistrationMapOutputWithContext(context.Context) AcmeRegistrationMapOutput
}

type AcmeRegistrationMap map[string]AcmeRegistrationInput

func (AcmeRegistrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AcmeRegistration)(nil)).Elem()
}

func (i AcmeRegistrationMap) ToAcmeRegistrationMapOutput() AcmeRegistrationMapOutput {
	return i.ToAcmeRegistrationMapOutputWithContext(context.Background())
}

func (i AcmeRegistrationMap) ToAcmeRegistrationMapOutputWithContext(ctx context.Context) AcmeRegistrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AcmeRegistrationMapOutput)
}

type AcmeRegistrationOutput struct{ *pulumi.OutputState }

func (AcmeRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AcmeRegistration)(nil)).Elem()
}

func (o AcmeRegistrationOutput) ToAcmeRegistrationOutput() AcmeRegistrationOutput {
	return o
}

func (o AcmeRegistrationOutput) ToAcmeRegistrationOutputWithContext(ctx context.Context) AcmeRegistrationOutput {
	return o
}

func (o AcmeRegistrationOutput) AccountKeyPem() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeRegistration) pulumi.StringOutput { return v.AccountKeyPem }).(pulumi.StringOutput)
}

func (o AcmeRegistrationOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeRegistration) pulumi.StringOutput { return v.EmailAddress }).(pulumi.StringOutput)
}

func (o AcmeRegistrationOutput) ExternalAccountBinding() AcmeRegistrationExternalAccountBindingPtrOutput {
	return o.ApplyT(func(v *AcmeRegistration) AcmeRegistrationExternalAccountBindingPtrOutput {
		return v.ExternalAccountBinding
	}).(AcmeRegistrationExternalAccountBindingPtrOutput)
}

func (o AcmeRegistrationOutput) RegistrationUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *AcmeRegistration) pulumi.StringOutput { return v.RegistrationUrl }).(pulumi.StringOutput)
}

type AcmeRegistrationArrayOutput struct{ *pulumi.OutputState }

func (AcmeRegistrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AcmeRegistration)(nil)).Elem()
}

func (o AcmeRegistrationArrayOutput) ToAcmeRegistrationArrayOutput() AcmeRegistrationArrayOutput {
	return o
}

func (o AcmeRegistrationArrayOutput) ToAcmeRegistrationArrayOutputWithContext(ctx context.Context) AcmeRegistrationArrayOutput {
	return o
}

func (o AcmeRegistrationArrayOutput) Index(i pulumi.IntInput) AcmeRegistrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AcmeRegistration {
		return vs[0].([]*AcmeRegistration)[vs[1].(int)]
	}).(AcmeRegistrationOutput)
}

type AcmeRegistrationMapOutput struct{ *pulumi.OutputState }

func (AcmeRegistrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AcmeRegistration)(nil)).Elem()
}

func (o AcmeRegistrationMapOutput) ToAcmeRegistrationMapOutput() AcmeRegistrationMapOutput {
	return o
}

func (o AcmeRegistrationMapOutput) ToAcmeRegistrationMapOutputWithContext(ctx context.Context) AcmeRegistrationMapOutput {
	return o
}

func (o AcmeRegistrationMapOutput) MapIndex(k pulumi.StringInput) AcmeRegistrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AcmeRegistration {
		return vs[0].(map[string]*AcmeRegistration)[vs[1].(string)]
	}).(AcmeRegistrationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeRegistrationInput)(nil)).Elem(), &AcmeRegistration{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeRegistrationArrayInput)(nil)).Elem(), AcmeRegistrationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AcmeRegistrationMapInput)(nil)).Elem(), AcmeRegistrationMap{})
	pulumi.RegisterOutputType(AcmeRegistrationOutput{})
	pulumi.RegisterOutputType(AcmeRegistrationArrayOutput{})
	pulumi.RegisterOutputType(AcmeRegistrationMapOutput{})
}
